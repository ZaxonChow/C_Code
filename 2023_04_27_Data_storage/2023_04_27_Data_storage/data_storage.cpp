#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>

//数据类型 - 内置类型、自定义类型 - 看待内存的视角
//1.内置 - unsigned\(signed)
//char - 字符数据类型 - 以ASCII值
//short [int] - 短整型
//int - 整型
//long [int] - 长整型
//float - 单精度浮点型
//double - 双精度浮点型
//2.构造类型
//数组类型
//构造体类型struct
//枚举类型enum
//联合类型union
//3.指针类型
//int *
//char *
//float *
//void *
//4.空类型
//void - 函数返回类型、函数参数、指针



//int main()
//{
//	//整型存储方式
//	//整数有符号数表示方式 - 原码、反码、补码
//	int a = 20;
//	//整数原码反码补码相同
//	int b = -10;
//	//计算机以补码存储
//	//将符号位和数值域统一
//	//加法减法统一处理
//	//硬件电路相同
//	return 0;
//}

//大端小端
//大端 - 大端字节序存储模式 - 数据的低位保存在内存高地址，数据的高位保存在内存的低地址中
//小端 - 小端字节序存储模式 - 数据的低位保存在内存低地址，数据的高位保存在内存的高地址

//int check_sys()
//{
//	int a = 1;
//	char *p = (char*)&a;
//	//返回1 - 小端
//	//返回0 - 大端
//	return *p;
//}

//int check_sys()
//{
//	int a = 1;
//	return *(char*)&a;
//}
//int main()
//{
//	//判断字节序
//	int ret = check_sys();
//	if (1 == ret)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}

//int main()
//{
//	char a = -1;
//	signed char b = -1;
//	unsigned char c = -1;
//	//11111111
//	//00000000 00000000 00000000 11111111
//	//%d打印，整型提升，无符号数，用0补
//	printf("%d %d %d\n", a, b, c);
//	return 0;
//}

//int main()
//{
//	char a = -128;
//	char b = 128;
//	//10000000 00000000 00000000 10000000
//	//11111111 11111111 11111111 01111111
//	//11111111 11111111 11111111 10000000
//	//11111111 11111111 11111111 10000000
//	printf("%u\n", a);//%u 打印十进制无符号数
//	printf("%u\n", b);
//	return 0;
//}

//int main()
//{
//	int i = -20;
//	//10000000 00000000 00000000 00010100
//	//11111111 11111111 11111111 11101011
//	//11111111 11111111 11111111 11101100
//	unsigned int j = 10;
//	//00000000 00000000 00000000 00001010
//	//11111111 11111111 11111111 11101100
//
//	//11111111 11111111 11111111 11110110 - 补码
//	//11111111 11111111 11111111 11110101 - 反码
//	//10000000 00000000 00000000 00001010 - 原码
//	printf("%d\n", i + j);
//	return 0;
//}

//#include<Windows.h>
//int main()
//{
//	unsigned int i;
//	for (i = 9; i >= 0; i--)
//	{
//		printf("%u\n", i);
//		Sleep(100);
//	}
//
//	return 0;
//}

//#include<string.h>
//int main()
//{
//	char a[1000];
//	int i;
//	for (i = 0; i < 1000; i++)
//	{
//		a[i] = -1 - i;	
//	}
//	printf("%d\n", strlen(a));
//	return 0;
//}


//unsigned char i = 0;
//
//int main()
//{
//	for (i = 0; i <= 255; i++)
//	{
//		printf("hello world\n");
//	}
//	return 0;
//}

//int main()
//{
//	double d = 1E10;
//	printf("%lf\n", d);
//	return 0;
//}

//浮点数的存储
//(-1)^S * M * 2^E
//M有效数字 - (M>=1 && M<2)
//9.0
//1001.0
//(-1)^0 * 1.001 * 2^3
//float
//S - 1bit - 0/1
//E - 8bit - 加上中间数：8位+127，11位+1023
//M - 23bit - 只保存xxxxxx小数部分
//

//int main()
//{
//	int n = 9;
//	float *pFloat = (float *)&n;
//	printf("n的值为：%d\n", n);
//	printf("*pFloat的值为：%f\n", *pFloat);
//
//	*pFloat = 9.0;
//	printf("num的值为：%d\n", n);
//	printf("*pFloat的值为：%f\n", *pFloat);
//	return 0;
//}

//int main()
//{
//	float f = 5.5;
//	//5.5
//	//101.1
//	//1.011*2^2
//	//s = 0;
//	//m = 1.011
//	//e = 2
//	//0 10000001 01100000000000000000000
//	//0100 0000 1011 0000 0000 0000 0000 0000
//	//0x40b00000
//	return 0;
//}

int main()
{
	int n = 9;
	//00000000000000000000000000001001
	float *pFloat = (float *)&n;
	//0 00000000 00000000000000000001001
	printf("n的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);

	*pFloat = 9.0;
	//1001.0
	//1.001*2^3
	//(-1)^0 * 1.001 * 2^3
	//0 10000010 001 00000000000000000000
	//0100 0001 0001 0000 0000 0000 0000 0000
	//0x41100000
	printf("num的值为：%d\n", n);
	printf("*pFloat的值为：%f\n", *pFloat);
	return 0;
}